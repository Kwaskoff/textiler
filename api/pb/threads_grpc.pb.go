// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package threads_pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// APIClient is the client API for API service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type APIClient interface {
	GetToken(ctx context.Context, opts ...grpc.CallOption) (API_GetTokenClient, error)
	NewDB(ctx context.Context, in *NewDBRequest, opts ...grpc.CallOption) (*NewDBReply, error)
	NewDBFromAddr(ctx context.Context, in *NewDBFromAddrRequest, opts ...grpc.CallOption) (*NewDBReply, error)
	ListDBs(ctx context.Context, in *ListDBsRequest, opts ...grpc.CallOption) (*ListDBsReply, error)
	GetDBInfo(ctx context.Context, in *GetDBInfoRequest, opts ...grpc.CallOption) (*GetDBInfoReply, error)
	DeleteDB(ctx context.Context, in *DeleteDBRequest, opts ...grpc.CallOption) (*DeleteDBReply, error)
	NewCollection(ctx context.Context, in *NewCollectionRequest, opts ...grpc.CallOption) (*NewCollectionReply, error)
	UpdateCollection(ctx context.Context, in *UpdateCollectionRequest, opts ...grpc.CallOption) (*UpdateCollectionReply, error)
	DeleteCollection(ctx context.Context, in *DeleteCollectionRequest, opts ...grpc.CallOption) (*DeleteCollectionReply, error)
	GetCollectionInfo(ctx context.Context, in *GetCollectionInfoRequest, opts ...grpc.CallOption) (*GetCollectionInfoReply, error)
	// Deprecated: Do not use.
	GetCollectionIndexes(ctx context.Context, in *GetCollectionIndexesRequest, opts ...grpc.CallOption) (*GetCollectionIndexesReply, error)
	ListCollections(ctx context.Context, in *ListCollectionsRequest, opts ...grpc.CallOption) (*ListCollectionsReply, error)
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateReply, error)
	Verify(ctx context.Context, in *VerifyRequest, opts ...grpc.CallOption) (*VerifyReply, error)
	Save(ctx context.Context, in *SaveRequest, opts ...grpc.CallOption) (*SaveReply, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteReply, error)
	Has(ctx context.Context, in *HasRequest, opts ...grpc.CallOption) (*HasReply, error)
	Find(ctx context.Context, in *FindRequest, opts ...grpc.CallOption) (*FindReply, error)
	FindByID(ctx context.Context, in *FindByIDRequest, opts ...grpc.CallOption) (*FindByIDReply, error)
	ReadTransaction(ctx context.Context, opts ...grpc.CallOption) (API_ReadTransactionClient, error)
	WriteTransaction(ctx context.Context, opts ...grpc.CallOption) (API_WriteTransactionClient, error)
	Listen(ctx context.Context, in *ListenRequest, opts ...grpc.CallOption) (API_ListenClient, error)
}

type aPIClient struct {
	cc grpc.ClientConnInterface
}

func NewAPIClient(cc grpc.ClientConnInterface) APIClient {
	return &aPIClient{cc}
}

func (c *aPIClient) GetToken(ctx context.Context, opts ...grpc.CallOption) (API_GetTokenClient, error) {
	stream, err := c.cc.NewStream(ctx, &API_ServiceDesc.Streams[0], "/threads.pb.API/GetToken", opts...)
	if err != nil {
		return nil, err
	}
	x := &aPIGetTokenClient{stream}
	return x, nil
}

type API_GetTokenClient interface {
	Send(*GetTokenRequest) error
	Recv() (*GetTokenReply, error)
	grpc.ClientStream
}

type aPIGetTokenClient struct {
	grpc.ClientStream
}

func (x *aPIGetTokenClient) Send(m *GetTokenRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *aPIGetTokenClient) Recv() (*GetTokenReply, error) {
	m := new(GetTokenReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *aPIClient) NewDB(ctx context.Context, in *NewDBRequest, opts ...grpc.CallOption) (*NewDBReply, error) {
	out := new(NewDBReply)
	err := c.cc.Invoke(ctx, "/threads.pb.API/NewDB", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) NewDBFromAddr(ctx context.Context, in *NewDBFromAddrRequest, opts ...grpc.CallOption) (*NewDBReply, error) {
	out := new(NewDBReply)
	err := c.cc.Invoke(ctx, "/threads.pb.API/NewDBFromAddr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ListDBs(ctx context.Context, in *ListDBsRequest, opts ...grpc.CallOption) (*ListDBsReply, error) {
	out := new(ListDBsReply)
	err := c.cc.Invoke(ctx, "/threads.pb.API/ListDBs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetDBInfo(ctx context.Context, in *GetDBInfoRequest, opts ...grpc.CallOption) (*GetDBInfoReply, error) {
	out := new(GetDBInfoReply)
	err := c.cc.Invoke(ctx, "/threads.pb.API/GetDBInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) DeleteDB(ctx context.Context, in *DeleteDBRequest, opts ...grpc.CallOption) (*DeleteDBReply, error) {
	out := new(DeleteDBReply)
	err := c.cc.Invoke(ctx, "/threads.pb.API/DeleteDB", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) NewCollection(ctx context.Context, in *NewCollectionRequest, opts ...grpc.CallOption) (*NewCollectionReply, error) {
	out := new(NewCollectionReply)
	err := c.cc.Invoke(ctx, "/threads.pb.API/NewCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) UpdateCollection(ctx context.Context, in *UpdateCollectionRequest, opts ...grpc.CallOption) (*UpdateCollectionReply, error) {
	out := new(UpdateCollectionReply)
	err := c.cc.Invoke(ctx, "/threads.pb.API/UpdateCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) DeleteCollection(ctx context.Context, in *DeleteCollectionRequest, opts ...grpc.CallOption) (*DeleteCollectionReply, error) {
	out := new(DeleteCollectionReply)
	err := c.cc.Invoke(ctx, "/threads.pb.API/DeleteCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetCollectionInfo(ctx context.Context, in *GetCollectionInfoRequest, opts ...grpc.CallOption) (*GetCollectionInfoReply, error) {
	out := new(GetCollectionInfoReply)
	err := c.cc.Invoke(ctx, "/threads.pb.API/GetCollectionInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *aPIClient) GetCollectionIndexes(ctx context.Context, in *GetCollectionIndexesRequest, opts ...grpc.CallOption) (*GetCollectionIndexesReply, error) {
	out := new(GetCollectionIndexesReply)
	err := c.cc.Invoke(ctx, "/threads.pb.API/GetCollectionIndexes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ListCollections(ctx context.Context, in *ListCollectionsRequest, opts ...grpc.CallOption) (*ListCollectionsReply, error) {
	out := new(ListCollectionsReply)
	err := c.cc.Invoke(ctx, "/threads.pb.API/ListCollections", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateReply, error) {
	out := new(CreateReply)
	err := c.cc.Invoke(ctx, "/threads.pb.API/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) Verify(ctx context.Context, in *VerifyRequest, opts ...grpc.CallOption) (*VerifyReply, error) {
	out := new(VerifyReply)
	err := c.cc.Invoke(ctx, "/threads.pb.API/Verify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) Save(ctx context.Context, in *SaveRequest, opts ...grpc.CallOption) (*SaveReply, error) {
	out := new(SaveReply)
	err := c.cc.Invoke(ctx, "/threads.pb.API/Save", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteReply, error) {
	out := new(DeleteReply)
	err := c.cc.Invoke(ctx, "/threads.pb.API/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) Has(ctx context.Context, in *HasRequest, opts ...grpc.CallOption) (*HasReply, error) {
	out := new(HasReply)
	err := c.cc.Invoke(ctx, "/threads.pb.API/Has", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) Find(ctx context.Context, in *FindRequest, opts ...grpc.CallOption) (*FindReply, error) {
	out := new(FindReply)
	err := c.cc.Invoke(ctx, "/threads.pb.API/Find", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) FindByID(ctx context.Context, in *FindByIDRequest, opts ...grpc.CallOption) (*FindByIDReply, error) {
	out := new(FindByIDReply)
	err := c.cc.Invoke(ctx, "/threads.pb.API/FindByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ReadTransaction(ctx context.Context, opts ...grpc.CallOption) (API_ReadTransactionClient, error) {
	stream, err := c.cc.NewStream(ctx, &API_ServiceDesc.Streams[1], "/threads.pb.API/ReadTransaction", opts...)
	if err != nil {
		return nil, err
	}
	x := &aPIReadTransactionClient{stream}
	return x, nil
}

type API_ReadTransactionClient interface {
	Send(*ReadTransactionRequest) error
	Recv() (*ReadTransactionReply, error)
	grpc.ClientStream
}

type aPIReadTransactionClient struct {
	grpc.ClientStream
}

func (x *aPIReadTransactionClient) Send(m *ReadTransactionRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *aPIReadTransactionClient) Recv() (*ReadTransactionReply, error) {
	m := new(ReadTransactionReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *aPIClient) WriteTransaction(ctx context.Context, opts ...grpc.CallOption) (API_WriteTransactionClient, error) {
	stream, err := c.cc.NewStream(ctx, &API_ServiceDesc.Streams[2], "/threads.pb.API/WriteTransaction", opts...)
	if err != nil {
		return nil, err
	}
	x := &aPIWriteTransactionClient{stream}
	return x, nil
}

type API_WriteTransactionClient interface {
	Send(*WriteTransactionRequest) error
	Recv() (*WriteTransactionReply, error)
	grpc.ClientStream
}

type aPIWriteTransactionClient struct {
	grpc.ClientStream
}

func (x *aPIWriteTransactionClient) Send(m *WriteTransactionRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *aPIWriteTransactionClient) Recv() (*WriteTransactionReply, error) {
	m := new(WriteTransactionReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *aPIClient) Listen(ctx context.Context, in *ListenRequest, opts ...grpc.CallOption) (API_ListenClient, error) {
	stream, err := c.cc.NewStream(ctx, &API_ServiceDesc.Streams[3], "/threads.pb.API/Listen", opts...)
	if err != nil {
		return nil, err
	}
	x := &aPIListenClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type API_ListenClient interface {
	Recv() (*ListenReply, error)
	grpc.ClientStream
}

type aPIListenClient struct {
	grpc.ClientStream
}

func (x *aPIListenClient) Recv() (*ListenReply, error) {
	m := new(ListenReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// APIServer is the server API for API service.
// All implementations must embed UnimplementedAPIServer
// for forward compatibility
type APIServer interface {
	GetToken(API_GetTokenServer) error
	NewDB(context.Context, *NewDBRequest) (*NewDBReply, error)
	NewDBFromAddr(context.Context, *NewDBFromAddrRequest) (*NewDBReply, error)
	ListDBs(context.Context, *ListDBsRequest) (*ListDBsReply, error)
	GetDBInfo(context.Context, *GetDBInfoRequest) (*GetDBInfoReply, error)
	DeleteDB(context.Context, *DeleteDBRequest) (*DeleteDBReply, error)
	NewCollection(context.Context, *NewCollectionRequest) (*NewCollectionReply, error)
	UpdateCollection(context.Context, *UpdateCollectionRequest) (*UpdateCollectionReply, error)
	DeleteCollection(context.Context, *DeleteCollectionRequest) (*DeleteCollectionReply, error)
	GetCollectionInfo(context.Context, *GetCollectionInfoRequest) (*GetCollectionInfoReply, error)
	// Deprecated: Do not use.
	GetCollectionIndexes(context.Context, *GetCollectionIndexesRequest) (*GetCollectionIndexesReply, error)
	ListCollections(context.Context, *ListCollectionsRequest) (*ListCollectionsReply, error)
	Create(context.Context, *CreateRequest) (*CreateReply, error)
	Verify(context.Context, *VerifyRequest) (*VerifyReply, error)
	Save(context.Context, *SaveRequest) (*SaveReply, error)
	Delete(context.Context, *DeleteRequest) (*DeleteReply, error)
	Has(context.Context, *HasRequest) (*HasReply, error)
	Find(context.Context, *FindRequest) (*FindReply, error)
	FindByID(context.Context, *FindByIDRequest) (*FindByIDReply, error)
	ReadTransaction(API_ReadTransactionServer) error
	WriteTransaction(API_WriteTransactionServer) error
	Listen(*ListenRequest, API_ListenServer) error
	mustEmbedUnimplementedAPIServer()
}

// UnimplementedAPIServer must be embedded to have forward compatible implementations.
type UnimplementedAPIServer struct {
}

func (UnimplementedAPIServer) GetToken(API_GetTokenServer) error {
	return status.Errorf(codes.Unimplemented, "method GetToken not implemented")
}
func (UnimplementedAPIServer) NewDB(context.Context, *NewDBRequest) (*NewDBReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewDB not implemented")
}
func (UnimplementedAPIServer) NewDBFromAddr(context.Context, *NewDBFromAddrRequest) (*NewDBReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewDBFromAddr not implemented")
}
func (UnimplementedAPIServer) ListDBs(context.Context, *ListDBsRequest) (*ListDBsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDBs not implemented")
}
func (UnimplementedAPIServer) GetDBInfo(context.Context, *GetDBInfoRequest) (*GetDBInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDBInfo not implemented")
}
func (UnimplementedAPIServer) DeleteDB(context.Context, *DeleteDBRequest) (*DeleteDBReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDB not implemented")
}
func (UnimplementedAPIServer) NewCollection(context.Context, *NewCollectionRequest) (*NewCollectionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewCollection not implemented")
}
func (UnimplementedAPIServer) UpdateCollection(context.Context, *UpdateCollectionRequest) (*UpdateCollectionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCollection not implemented")
}
func (UnimplementedAPIServer) DeleteCollection(context.Context, *DeleteCollectionRequest) (*DeleteCollectionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCollection not implemented")
}
func (UnimplementedAPIServer) GetCollectionInfo(context.Context, *GetCollectionInfoRequest) (*GetCollectionInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCollectionInfo not implemented")
}
func (UnimplementedAPIServer) GetCollectionIndexes(context.Context, *GetCollectionIndexesRequest) (*GetCollectionIndexesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCollectionIndexes not implemented")
}
func (UnimplementedAPIServer) ListCollections(context.Context, *ListCollectionsRequest) (*ListCollectionsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCollections not implemented")
}
func (UnimplementedAPIServer) Create(context.Context, *CreateRequest) (*CreateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedAPIServer) Verify(context.Context, *VerifyRequest) (*VerifyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Verify not implemented")
}
func (UnimplementedAPIServer) Save(context.Context, *SaveRequest) (*SaveReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Save not implemented")
}
func (UnimplementedAPIServer) Delete(context.Context, *DeleteRequest) (*DeleteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedAPIServer) Has(context.Context, *HasRequest) (*HasReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Has not implemented")
}
func (UnimplementedAPIServer) Find(context.Context, *FindRequest) (*FindReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Find not implemented")
}
func (UnimplementedAPIServer) FindByID(context.Context, *FindByIDRequest) (*FindByIDReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByID not implemented")
}
func (UnimplementedAPIServer) ReadTransaction(API_ReadTransactionServer) error {
	return status.Errorf(codes.Unimplemented, "method ReadTransaction not implemented")
}
func (UnimplementedAPIServer) WriteTransaction(API_WriteTransactionServer) error {
	return status.Errorf(codes.Unimplemented, "method WriteTransaction not implemented")
}
func (UnimplementedAPIServer) Listen(*ListenRequest, API_ListenServer) error {
	return status.Errorf(codes.Unimplemented, "method Listen not implemented")
}
func (UnimplementedAPIServer) mustEmbedUnimplementedAPIServer() {}

// UnsafeAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to APIServer will
// result in compilation errors.
type UnsafeAPIServer interface {
	mustEmbedUnimplementedAPIServer()
}

func RegisterAPIServer(s grpc.ServiceRegistrar, srv APIServer) {
	s.RegisterService(&API_ServiceDesc, srv)
}

func _API_GetToken_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(APIServer).GetToken(&aPIGetTokenServer{stream})
}

type API_GetTokenServer interface {
	Send(*GetTokenReply) error
	Recv() (*GetTokenRequest, error)
	grpc.ServerStream
}

type aPIGetTokenServer struct {
	grpc.ServerStream
}

func (x *aPIGetTokenServer) Send(m *GetTokenReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *aPIGetTokenServer) Recv() (*GetTokenRequest, error) {
	m := new(GetTokenRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _API_NewDB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewDBRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).NewDB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/threads.pb.API/NewDB",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).NewDB(ctx, req.(*NewDBRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_NewDBFromAddr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewDBFromAddrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).NewDBFromAddr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/threads.pb.API/NewDBFromAddr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).NewDBFromAddr(ctx, req.(*NewDBFromAddrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ListDBs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDBsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ListDBs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/threads.pb.API/ListDBs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ListDBs(ctx, req.(*ListDBsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetDBInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDBInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetDBInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/threads.pb.API/GetDBInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetDBInfo(ctx, req.(*GetDBInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_DeleteDB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDBRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).DeleteDB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/threads.pb.API/DeleteDB",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).DeleteDB(ctx, req.(*DeleteDBRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_NewCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).NewCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/threads.pb.API/NewCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).NewCollection(ctx, req.(*NewCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_UpdateCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).UpdateCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/threads.pb.API/UpdateCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).UpdateCollection(ctx, req.(*UpdateCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_DeleteCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).DeleteCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/threads.pb.API/DeleteCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).DeleteCollection(ctx, req.(*DeleteCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetCollectionInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCollectionInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetCollectionInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/threads.pb.API/GetCollectionInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetCollectionInfo(ctx, req.(*GetCollectionInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetCollectionIndexes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCollectionIndexesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetCollectionIndexes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/threads.pb.API/GetCollectionIndexes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetCollectionIndexes(ctx, req.(*GetCollectionIndexesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ListCollections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCollectionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ListCollections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/threads.pb.API/ListCollections",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ListCollections(ctx, req.(*ListCollectionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/threads.pb.API/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_Verify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).Verify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/threads.pb.API/Verify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).Verify(ctx, req.(*VerifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_Save_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).Save(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/threads.pb.API/Save",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).Save(ctx, req.(*SaveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/threads.pb.API/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_Has_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).Has(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/threads.pb.API/Has",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).Has(ctx, req.(*HasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_Find_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).Find(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/threads.pb.API/Find",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).Find(ctx, req.(*FindRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_FindByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).FindByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/threads.pb.API/FindByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).FindByID(ctx, req.(*FindByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ReadTransaction_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(APIServer).ReadTransaction(&aPIReadTransactionServer{stream})
}

type API_ReadTransactionServer interface {
	Send(*ReadTransactionReply) error
	Recv() (*ReadTransactionRequest, error)
	grpc.ServerStream
}

type aPIReadTransactionServer struct {
	grpc.ServerStream
}

func (x *aPIReadTransactionServer) Send(m *ReadTransactionReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *aPIReadTransactionServer) Recv() (*ReadTransactionRequest, error) {
	m := new(ReadTransactionRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _API_WriteTransaction_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(APIServer).WriteTransaction(&aPIWriteTransactionServer{stream})
}

type API_WriteTransactionServer interface {
	Send(*WriteTransactionReply) error
	Recv() (*WriteTransactionRequest, error)
	grpc.ServerStream
}

type aPIWriteTransactionServer struct {
	grpc.ServerStream
}

func (x *aPIWriteTransactionServer) Send(m *WriteTransactionReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *aPIWriteTransactionServer) Recv() (*WriteTransactionRequest, error) {
	m := new(WriteTransactionRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _API_Listen_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListenRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(APIServer).Listen(m, &aPIListenServer{stream})
}

type API_ListenServer interface {
	Send(*ListenReply) error
	grpc.ServerStream
}

type aPIListenServer struct {
	grpc.ServerStream
}

func (x *aPIListenServer) Send(m *ListenReply) error {
	return x.ServerStream.SendMsg(m)
}

// API_ServiceDesc is the grpc.ServiceDesc for API service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var API_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "threads.pb.API",
	HandlerType: (*APIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewDB",
			Handler:    _API_NewDB_Handler,
		},
		{
			MethodName: "NewDBFromAddr",
			Handler:    _API_NewDBFromAddr_Handler,
		},
		{
			MethodName: "ListDBs",
			Handler:    _API_ListDBs_Handler,
		},
		{
			MethodName: "GetDBInfo",
			Handler:    _API_GetDBInfo_Handler,
		},
		{
			MethodName: "DeleteDB",
			Handler:    _API_DeleteDB_Handler,
		},
		{
			MethodName: "NewCollection",
			Handler:    _API_NewCollection_Handler,
		},
		{
			MethodName: "UpdateCollection",
			Handler:    _API_UpdateCollection_Handler,
		},
		{
			MethodName: "DeleteCollection",
			Handler:    _API_DeleteCollection_Handler,
		},
		{
			MethodName: "GetCollectionInfo",
			Handler:    _API_GetCollectionInfo_Handler,
		},
		{
			MethodName: "GetCollectionIndexes",
			Handler:    _API_GetCollectionIndexes_Handler,
		},
		{
			MethodName: "ListCollections",
			Handler:    _API_ListCollections_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _API_Create_Handler,
		},
		{
			MethodName: "Verify",
			Handler:    _API_Verify_Handler,
		},
		{
			MethodName: "Save",
			Handler:    _API_Save_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _API_Delete_Handler,
		},
		{
			MethodName: "Has",
			Handler:    _API_Has_Handler,
		},
		{
			MethodName: "Find",
			Handler:    _API_Find_Handler,
		},
		{
			MethodName: "FindByID",
			Handler:    _API_FindByID_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetToken",
			Handler:       _API_GetToken_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ReadTransaction",
			Handler:       _API_ReadTransaction_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "WriteTransaction",
			Handler:       _API_WriteTransaction_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Listen",
			Handler:       _API_Listen_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "threads.proto",
}
